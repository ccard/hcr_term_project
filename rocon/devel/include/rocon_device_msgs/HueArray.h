/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/chris/Documents/mines/mines_grad/csci598/hcr_term_project/rocon/src/rocon_msgs/rocon_device_msgs/msg/HueArray.msg
 *
 */


#ifndef ROCON_DEVICE_MSGS_MESSAGE_HUEARRAY_H
#define ROCON_DEVICE_MSGS_MESSAGE_HUEARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rocon_device_msgs/Hue.h>

namespace rocon_device_msgs
{
template <class ContainerAllocator>
struct HueArray_
{
  typedef HueArray_<ContainerAllocator> Type;

  HueArray_()
    : hue_list()  {
    }
  HueArray_(const ContainerAllocator& _alloc)
    : hue_list(_alloc)  {
    }



   typedef std::vector< ::rocon_device_msgs::Hue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_device_msgs::Hue_<ContainerAllocator> >::other >  _hue_list_type;
  _hue_list_type hue_list;




  typedef boost::shared_ptr< ::rocon_device_msgs::HueArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_device_msgs::HueArray_<ContainerAllocator> const> ConstPtr;

}; // struct HueArray_

typedef ::rocon_device_msgs::HueArray_<std::allocator<void> > HueArray;

typedef boost::shared_ptr< ::rocon_device_msgs::HueArray > HueArrayPtr;
typedef boost::shared_ptr< ::rocon_device_msgs::HueArray const> HueArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_device_msgs::HueArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_device_msgs::HueArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rocon_device_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rocon_device_msgs': ['/home/chris/Documents/mines/mines_grad/csci598/hcr_term_project/rocon/src/rocon_msgs/rocon_device_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_device_msgs::HueArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_device_msgs::HueArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_device_msgs::HueArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd3db2bea2a3c0c48f222663b8b78488";
  }

  static const char* value(const ::rocon_device_msgs::HueArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd3db2bea2a3c0c4ULL;
  static const uint64_t static_value2 = 0x8f222663b8b78488ULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_device_msgs/HueArray";
  }

  static const char* value(const ::rocon_device_msgs::HueArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Hue[] hue_list\n\
\n\
================================================================================\n\
MSG: rocon_device_msgs/Hue\n\
int32 light_id\n\
string type\n\
string name\n\
string modelid\n\
string swvesion\n\
HueState state\n\
\n\
\n\
================================================================================\n\
MSG: rocon_device_msgs/HueState\n\
#specific effect\n\
string NONE = none\n\
#effect mode\n\
\n\
#the light will cycle through all hues using the current brightness and saturation settings.\n\
string COLOR_LOOP =  colorloop \n\
# alert mode\n\
\n\
# The light is performing one breathe cycle.\n\
string SELECT = select  \n\
# he light is performing breathe cycles for 30 seconds or mode is none\n\
string LSELECT = lselect \n\
\n\
#color mode\n\
string HS = hs #hsv color space\n\
string XY = xy #cie color space\n\
string CT = ct #color temperature space\n\
\n\
#state\n\
bool on #light on/off flag true:on /false:off\n\
\n\
#color coordination in CIE color space \n\
#http://developers.meethue.com/coreconcepts.html#color_gets_more_complicated\n\
float32[] xy #xy \n\
\n\
#color coordination in HSV color space \n\
#http://en.wikipedia.org/wiki/HSL_and_HSV\n\
uint16 hue #h\n\
uint8 sat #s\n\
uint8 bri #v\n\
\n\
#color temperature  \n\
#http://en.wikipedia.org/wiki/Mired\n\
#capable of 153 (6500K) to 500 (2000K)\n\
uint16 ct \n\
\n\
#specific effect\n\
string mode\n\
\n\
#transition time\n\
int32 transitiontime\n\
\n\
\n\
#config\n\
string color_mode\n\
bool reachable\n\
";
  }

  static const char* value(const ::rocon_device_msgs::HueArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hue_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct HueArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_device_msgs::HueArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_device_msgs::HueArray_<ContainerAllocator>& v)
  {
    s << indent << "hue_list[]" << std::endl;
    for (size_t i = 0; i < v.hue_list.size(); ++i)
    {
      s << indent << "  hue_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_device_msgs::Hue_<ContainerAllocator> >::stream(s, indent + "    ", v.hue_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_DEVICE_MSGS_MESSAGE_HUEARRAY_H
